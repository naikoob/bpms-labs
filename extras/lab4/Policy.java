package org.acme.insurance;

import java.util.ArrayList;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class Policy implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	@org.kie.api.definition.type.Label(value = "Driver")
	private org.acme.insurance.Driver driver;
	@org.kie.api.definition.type.Label(value = "Vehicle")
	private org.acme.insurance.Vehicle vehicle;
	@org.kie.api.definition.type.Label(value = "List of additional drivers")
	private java.util.List<org.acme.insurance.Driver> additionalDrivers;
	@org.kie.api.definition.type.Label(value = "List of coverages")
	private java.util.List<org.acme.insurance.Coverage> coverages;
	@org.kie.api.definition.type.Label(value = "List of rejections")
	private java.util.List<org.acme.insurance.Rejection> rejections;
	@org.kie.api.definition.type.Label(value = "List of adjustments")
	private java.util.List<org.acme.insurance.Adjustment> adjustments;
	@org.kie.api.definition.type.Label(value = "Base price")
	private java.lang.Double basePrice;
	@org.kie.api.definition.type.Label(value = "Final price")
	private java.lang.Double finalPrice;

	public Policy() {
	}

	public org.acme.insurance.Driver getDriver() {
		return this.driver;
	}

	public void setDriver(org.acme.insurance.Driver driver) {
		this.driver = driver;
	}

	public org.acme.insurance.Vehicle getVehicle() {
		return this.vehicle;
	}

	public void setVehicle(org.acme.insurance.Vehicle vehicle) {
		this.vehicle = vehicle;
	}

	public java.util.List<org.acme.insurance.Driver> getAdditionalDrivers() {
		return this.additionalDrivers;
	}

	public void setAdditionalDrivers(java.util.List<org.acme.insurance.Driver> additionalDrivers) {
		this.additionalDrivers = additionalDrivers;
	}

	public java.util.List<org.acme.insurance.Coverage> getCoverages() {
		return this.coverages;
	}

	public void setCoverages(java.util.List<org.acme.insurance.Coverage> coverages) {
		this.coverages = coverages;
	}

	public java.util.List<org.acme.insurance.Rejection> getRejections() {
		return this.rejections;
	}

	public void setRejections(java.util.List<org.acme.insurance.Rejection> rejections) {
		this.rejections = rejections;
	}

	public java.util.List<org.acme.insurance.Adjustment> getAdjustments() {
		return this.adjustments;
	}

	public void setAdjustments(java.util.List<org.acme.insurance.Adjustment> adjustments) {
		this.adjustments = adjustments;
	}

	public java.lang.Double getBasePrice() {
		return this.basePrice;
	}

	public void setBasePrice(java.lang.Double basePrice) {
		this.basePrice = basePrice;
	}

	public java.lang.Double getFinalPrice() {
		return this.finalPrice;
	}

	public void setFinalPrice(java.lang.Double finalPrice) {
		this.finalPrice = finalPrice;
	}

	public Policy(org.acme.insurance.Driver driver, org.acme.insurance.Vehicle vehicle,
			java.util.List<org.acme.insurance.Driver> additionalDrivers,
			java.util.List<org.acme.insurance.Coverage> coverages,
			java.util.List<org.acme.insurance.Rejection> rejections,
			java.util.List<org.acme.insurance.Adjustment> adjustments, java.lang.Double basePrice,
			java.lang.Double finalPrice) {
		this.driver = driver;
		this.vehicle = vehicle;
		this.additionalDrivers = additionalDrivers;
		this.coverages = coverages;
		this.rejections = rejections;
		this.adjustments = adjustments;
		this.basePrice = basePrice;
		this.finalPrice = finalPrice;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Policy [driver=")
				.append(driver)
				.append(", vehicle=")
				.append(vehicle)
				.append(", additionalDrivers=")
				.append(additionalDrivers)
				.append(", coverages=")
				.append(coverages)
				.append(", rejections=")
				.append(rejections)
				.append(", adjustments=")
				.append(adjustments)
				.append(", basePrice=")
				.append(basePrice)
				.append(", finalPrice=")
				.append(finalPrice)
				.append("]");
		return builder.toString();
	}

	public Rejection addRejection(String reason) {
		if (null == rejections) {
			rejections = new ArrayList<Rejection>();
		}
		Rejection r = new Rejection(reason);
		rejections.add(r);
		return r;
	}
	
	public Adjustment addDiscount(String unit, Double amount, String description) {
		return addAdjustment("discount", unit, amount, description);
	}

	public Adjustment addSurcharge(String unit, Double amount, String description) {
		return addAdjustment("surcharge", unit, amount, description);
	}
	
	public Adjustment addAdjustment(String type, String unit, Double amount, String description) {
		if (null == adjustments) {
			adjustments = new ArrayList<Adjustment>();
		}
		Adjustment adj = new Adjustment(type, unit, amount, description);
		adjustments.add(adj);
		return adj;
	}
}
